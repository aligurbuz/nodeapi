{
  "_args": [
    [
      {
        "raw": "async-rollback",
        "scope": null,
        "escapedName": "async-rollback",
        "name": "async-rollback",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/var/www/public/nodeapi"
    ]
  ],
  "_from": "async-rollback@latest",
  "_id": "async-rollback@0.0.1",
  "_inCache": true,
  "_location": "/async-rollback",
  "_npmUser": {
    "name": "rossj",
    "email": "ross@mazira.com"
  },
  "_npmVersion": "1.2.18",
  "_phantomChildren": {},
  "_requested": {
    "raw": "async-rollback",
    "scope": null,
    "escapedName": "async-rollback",
    "name": "async-rollback",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/async-rollback/-/async-rollback-0.0.1.tgz",
  "_shasum": "e02c4c5c6c2d7da24d1cada1b52a5f1a0fb39748",
  "_shrinkwrap": null,
  "_spec": "async-rollback",
  "_where": "/var/www/public/nodeapi",
  "author": {
    "name": "Ross Johnson",
    "email": "ross@mazira.com"
  },
  "bugs": {
    "url": "https://github.com/rossj/async-rollback/issues"
  },
  "contributors": [],
  "dependencies": {
    "lodash": "1.2.1"
  },
  "description": "A plugin for caolan's async module that add support to rollback successful async operations on failure.",
  "devDependencies": {
    "async": "0.2.x",
    "mocha": "1.9.0",
    "should": "1.2.2"
  },
  "directories": {},
  "dist": {
    "shasum": "e02c4c5c6c2d7da24d1cada1b52a5f1a0fb39748",
    "tarball": "https://registry.npmjs.org/async-rollback/-/async-rollback-0.0.1.tgz"
  },
  "engines": {
    "node": ">= 0.8.x"
  },
  "homepage": "https://github.com/rossj/async-rollback#readme",
  "keywords": [
    "async",
    "rollback",
    "undo",
    "integrity"
  ],
  "main": "./lib/main.js",
  "maintainers": [
    {
      "name": "rossj",
      "email": "ross@mazira.com"
    }
  ],
  "name": "async-rollback",
  "optionalDependencies": {},
  "peerDependencies": {
    "async": ">= 0.1.6"
  },
  "readme": "#async-rollback\n\nA plugin for [caolan's async module](https://github.com/caolan/async) that adds\nadditional async methods with improved integrity. For example, `async.parallel`\nnormally executes the callback immediately if any task returns an error, but this\nis not always desired. `async-rollback` contains a `parallelRollback` method which\ncan undo parallel tasks that succeeded if one of the tasks fails.\n\n## Installation\n\nTo install using npm:\n\n    npm install async-rollback\n\nTo use, simply `require('async-rollback')` near the beginning of your node code.\nIt augments the normal `async` module so must only be required one time.\n\n\n## Documentation\n### Control Flow\n\n* [parallelAll](#parallelAll)\n* [parallelRollback](#parallelRollback)\n\n## Control Flow\n\n<a name=\"parallelAll\" />\n### parallelAll(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the error is cached until all tasks complete. Once the tasks have\ncompleted, the results are passed to the final callback as an array. If any\nfunctions passed errors, the main callbacks error argument will be an array,\ncorresponding to the input functions.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. If any tasks result in an error, the final callbacks error\nargument will also be an object.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(errs, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks. It also receives an error\n  array (or object) if any errors occurred (null otherwise).\n\n__Example__\n\n```js\nasync.parallelAll([\n    function(callback){\n        setTimeout(function(){\n            callback(null, 'one');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback('error2');\n        }, 100);\n    }\n],\n// optional callback\nfunction(errs, results){\n    // errs = [null, 'error2']\n    // results = ['one', null]\n    if (errs)\n        console.log('Errors occurred');\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(2, null);\n        }, 100);\n    }\n},\nfunction(errs, results) {\n    // errs = {one: null, two: 2}\n    // results = {one: 1, two: null}\n    if (errs)\n        console.log('Errors occurred');\n});\n```\n---------------------------------------\n<a name=\"parallelRollback\" />\n### parallelRollback(tasks, [callback])\n\nSimilar to `parallel` and `parallelAll`, except each task may have an `undo`\nproperty that is executed if that task succeeds while others fail. This function\nworks with the typical arrays and objects of tasks (and behaves the same as\n`parallelAll` in this case), but accepts a new array (or object) format of\n`do` / `undo` functions. If any task (or tasks) fail, the `undo` function of any\nnon-failing task will automatically be called. The final callback is executed\nwith an array (or object) of results (and possibly errors) after all tasks\nand potential `undo` functions have been called.\n\n__Arguments__\n\n* tasks - An array or object of `do` / `undo` tasks to run. Each `do` function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value. The `undo` function may be called if the task\n  succeeds while others fail. The `undo` function is passed the value of the `do` function,\n  along with a callback(err) it must call on completion.\n* callback(errs, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks. It also receives an error\n  array (or object) if any errors occurred (null otherwise).\n\n__Example__\n\n```js\nasync.parallelRollback([\n    {\n        do : function(callback) {\n            uploadImage('image1.png', callback);\n        },\n        undo : function(result, callback) {\n            deleteImage(result, callback);\n        }\n    },\n    {\n        do : function(callback) {\n            uploadImage('image2.png', callback);\n        },\n        undo : function(result, callback) {\n            deleteImage(result, callback);\n        }\n    }\n],\n// optional callback\nfunction(errs, results){\n    // With a typical .parallel() call, if one of the uploads failed then the other image would be left\n    // uploaded. By using .parallelRollback(), either both images or no images will get uploaded.\n    // For example, if the uploading of image2 fails, then the undo method of the first task will be called.\n    if (errs)\n        console.log('Errors occurred');\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    image1 : {\n        do : function(callback) {\n            uploadImage('image1.png', callback);\n        },\n        undo : function(result, callback) {\n            deleteImage(result, callback);\n        }\n    },\n    image2 : {\n        do : function(callback) {\n            uploadImage('image2.png', callback);\n        },\n        undo : function(result, callback) {\n            deleteImage(result, callback);\n        }\n    }\n},\nfunction(errs, results) {\n    if (errs)\n        console.log('Errors occurred');\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/rossj/async-rollback.git"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "version": "0.0.1"
}
